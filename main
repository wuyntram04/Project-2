#include<iostream>
#include"input.h"
#include"Statistician.h"
#include"Quadratic.h"
#include"Rational.h"
#include"Pseudorandom.h"
using namespace std;

void mainMenu();
void StatisticianFuntion();
void QuadraticFunction();
void QuadraticMenu();
void RationalFunction();
void RationalMenu();
void PseudorandomMenu();
void PseudorandomFunction();



int main()
{
	do
	{
		system("cls");
		mainMenu();
		switch (toupper(inputChar("\n\tOption: ")))
		{
		case '1': StatisticianFuntion();
			break;
		case '2': QuadraticFunction();
			break;
		case '3': PseudorandomFunction(); 
			break;
		case '4': RationalFunction();
			break;
		case 'X': EXIT_SUCCESS;
		default:
			cout << "\n\tERROR: Invalid Input.";
			break;

		}

		cout << "\n\n\t";
		system("pause");

	} while (true);

	return EXIT_SUCCESS;
}


void mainMenu()
{
	cout << "\n\tCMPR131 Chapter2 - ADT Assignments by Thi Ho, Khang Quach, Thi Ngoc Quynh Pham (09/02/2025)";
	cout << "\n\t" << string(80, char(205));
	cout << "\n\t\t1> Statistician";
	cout << "\n\t\t2> Quadratic Expression";
	cout << "\n\t\t3> Pseudorandom";
	cout << "\n\t\t4> Rational number";
	cout << "\n\t" << string(80, char(196));
	cout << "\n\t\tx. Exit";
	cout << "\n\t" << string(80, char(205));
}

// Stattiscian
void StatMenu()
{
	cout << "\n\t1> Statistician Menu";
	cout << "\n\t" << string(80, char(205));
	cout << "\n\t\tA. Insert a number";
	cout << "\n\t\tB. Size of sequence";
	cout << "\n\t\tC. Last number of sequence";
	cout << "\n\t\tD. Sum of sequence";
	cout << "\n\t\tE. Mean of sequence";
	cout << "\n\t\tF. Smallest number of sequence";
	cout << "\n\t\tG. Largest number of sequence";
	cout << "\n\t\tH. Delete all value";
	cout << "\n\t\tI. Combine with another sequence";
	cout << "\n\t" << string(80, char(205));
	cout << "\n\t\tR. Return";
	cout << "\n\t" << string(80, char(205));
}

void StatisticianFuntion()
{
	Statistician s;
	Statistician s1;

	do
	{
		system("cls");
		StatMenu();

		try
		{
			switch (toupper(inputChar("\n\tOption: ")))
			{
			case 'A':
			{
				double number = inputDouble("\n\tEnter a double number: ");
				s.next_number(number);
				break;
			}
			case 'B':
				cout << "\n\tThe size of a sequence is: \t" << s.length();
				break;
			case 'C':
				cout << "\n\tThe last number of sequence is: \t" << s.last();
				break;
			case 'D':
				cout << "\n\tThe Sum of sequence is: \t" << s.sum();
				break;
			case 'E':
				cout << "\n\tThe Mean of sequence is: \t" << s.mean();
				break;
			case 'F':
				cout << "\n\tThe smallest number of sequence is: \t" << s.minimum();
				break;
			case 'G':
				cout << "\n\tThe largest number of sequence is: \t" << s.maximum();
				break;
			case 'H':
			{
				cout << "\n\tReset the value in sequence.";
				s.reset();
				break;
			}	
			case 'I':
			{
				double number1 = inputDouble("\n\tEnter a double number for a new sequence: ");
				s1.next_number(number1);
				s = s + s1;
				cout << "\n\tSequences combined successfully.";
				break;
			}
			case 'R':
				return;
			default: cout << "\n\tERROR: Invalid Input";
			}
		}
		catch (const runtime_error& e)
		{
			cout << "\n\tERROR: " << e.what();
		}

		cout << "\n\n\t";
		system("pause");
	} while (true);
}

// Rational
void RationalMenu()
{
	cout << "\n\t4> Rational Number Menu";
	cout << "\n\t" << string(80, char(205));
	cout << "\n\t\tA. Enter values of rational number R1";
	cout << "\n\t\tB. Display R1";
	cout << "\n\t\tC. Enter values for  rational number R2";
	cout << "\n\t\tD. Display R2";
	cout << "\n\t\tE. Multiplication of 2 rational numbers (R1 * R2)";
	cout << "\n\t\tF. Division of 2 rational numbers (R1 / R2)";
	cout << "\n\t\tG. Addition of 2 rational numbers (R1 + R2)";
	cout << "\n\t\tH. Subtraction 2 rational numbers (R1 - R2)";
	cout << "\n\t\tI. (R1 == R2)";
	cout << "\n\t\tJ. (R1 < R2)";
	cout << "\n\t" << string(80, char(196));
	cout << "\n\t\tR. Return";
	cout << "\n\t" << string(80, char(205));
}

void RationalFunction()
{
	Rational R1;
	Rational R2;
	

	do
	{
		system("cls");
		RationalMenu();
		try
		{
			switch (toupper(inputChar("\n\tOption: ")))
			{
			case 'A':
			{
				int n = inputInteger("\n\tEnter the value for the numerator: ");
				int d = inputInteger("\n\tEnter the value for the denominator: ");

				R1.setNumerator(n);
				try
				{
					if (d == 0)
					{
						throw runtime_error("Zero is not allowed for denominator.");
					}
       
					R1.setDenominator(d);
					
				}
				catch (const exception& e)
				{
					cout << "\n\tERROR: " << e.what();
				}


	
			}
			break;
			case 'B':
			{
				cout << "\n\tRational number R1: " << R1.getNumerator() << "/" << R1.getDenominator();
			}
			break;
			case 'C':
			{
				int n = inputInteger("\n\tEnter the value for the numerator: ");
				int d = inputInteger("\n\tEnter the value for the denominator: ");

				R2.setNumerator(n);
				try
				{
					if (d == 0)
					{
						throw runtime_error("Zero is not allowed for denominator.");
					}

					R2.setDenominator(d);

				}
				catch (const exception& e)
				{
					cout << "\n\tERROR: " << e.what();
				}
			}
			break;
			case 'D':
			{
				cout << "\n\tRational number R2: " << R2.getNumerator() << "/" << R2.getDenominator();
			}
			break;
			case 'E':
			{
				Rational R3 = R1 * R2;
				cout << "\n\tR1 * R2:  " << R3.getNumerator() << "/" << R3.getDenominator();
			}
			break;
			case 'F':
			{
				Rational R3 = R1 / R2;
				cout << "\n\tR1 / R2:  " << R3.getNumerator() << "/" << R3.getDenominator();
			} 
			break;
			case 'G':
			{
				Rational R3 = R1 + R2;
				cout << "\n\tR1 + R2:  " << R3.getNumerator() << "/" << R3.getDenominator();
			}
			break;
			case 'H':
			{
				Rational R3 = R1 - R2;
				cout << "\n\tR1 - R2:  " << R3.getNumerator() << "/" << R3.getDenominator();
			}
			break;
			case 'I':
			{
				if (R1 == R2) {
					cout << "\n\tR1 == R2 : TRUE";
				}
				else {
					cout << "\n\tR1 == R2 : FALSE";
				}
			}
			break;
			case 'J':
			{
				if (R1 < R2) {
					cout << "\n\tR1 < R2 : TRUE";
				}
				else {
					cout << "\n\tR1 < R2 : FALSE";
				}
				break;
			}
			default: cout << "\n\tERROR: Invalid Input";
			}

		}
		catch (const runtime_error& e)
		{
			cout << "\n\tERROR: " << e.what();
		}

	cout << "\n\n\t";
	system("pause");
	} while (true);

}

// Quadratic
void QuadraticMenu()
{
	cout << "\n\t1> Quadratic Menu";
	cout << "\n\t" << string(80, char(205));
	cout << "\n\t\tD. Display the expression";
	cout << "\n\t\tA. Set coefficient (a)";
	cout << "\n\t\tB. Set coefficient (b)";
	cout << "\n\t\tC. Set coefficient (c)";
	cout << "\n\t\tE. Get evaluation (x)";
	cout << "\n\t\tN. Get the number of real roots";
	cout << "\n\t\tG. Get real root(s)";
	cout << "\n\t\tH. Get sum of real root(s)";
	cout << "\n\t\tI. Get scale real root(s)";
	cout << "\n\t" << string(80, char(205));
	cout << "\n\t\tR. Return";
	cout << "\n\t" << string(80, char(205));
}

void QuadraticFunction()
{
	Quadratic q;

	do
	{
		system("cls");
		QuadraticMenu();
		int num = q.NumRealRoot();

		switch (toupper(inputChar("\n\tOption: ")))
		{
		case 'D':
			q.showFormula();
			break;
		case 'A':
		{
			q.setA(inputDouble("\n\tEnter a value and set coefficient (a): ", 0.0, 100.0));
			cout << "\n\tSet a = " << q.getA();
			break;
		}
		case 'B':
		{
			q.setB(inputDouble("\n\tEnter a value and set coefficient (b): ", 0.0, 100.0));
			cout << "\n\tSet b = " << q.getB();
			break;
		}
		case 'C':
		{
			q.setC(inputDouble("\n\tEnter a value and set coefficient (c): ", 0.0, 100.0));
			cout << "\n\tSet c = " << q.getC();
			break;
		}
		case 'E':
		{
			q.setX(inputDouble("\n\tEnter a value of x: ", 0.0, 100.0));
			cout << "\n\tEvaluation result: " << q.quadratic();
			break;
		}
		case 'N':
		{
			if (num == 3)
			{
				cout << "\n\tNumber of real roots: Infinity";
				break;
			}
			cout << "\n\tNumber of real roots: " << num;
			break;
		}
		case 'G':
		{
			if (num == 3)
			{
				cout << "\n\tEvery value of x is a real root";
			}
			else if (num == 0)
			{
				cout << "\n\tNo real roots";
			}
			else if (num == 1) {
				cout << "\n\tOne real root: " << q.SmallerRoot();
			}
			else {
				cout << "\n\tTwo real roots:";
				cout << "\n\tSmaller root = " << q.SmallerRoot();
				cout << "\n\tLarger  root = " << q.LargerRoot();
			}
			break;
		}
		case 'H':
		{
			Quadratic q1;
			Quadratic q2;
			cout << "\n\tPlease enter values for second equation\n\n";

			q1.setA(inputDouble("\n\tEnter a value and set coefficient (a): ", 0.0, 100.0));
			q1.setB(inputDouble("\n\tEnter a value and set coefficient (b): ", 0.0, 100.0));
			q1.setC(inputDouble("\n\tEnter a value and set coefficient (c): ", 0.0, 100.0));

			q2 = q + q1;
			q2.showFormula();
			char choice = toupper(inputChar("\n\tStore this as the current expression? (Y/N): "));
			if (choice == 'Y') {
				q = q2;
				cout << "\n\tSaved. Current expression is now: ";
			}
			else {
				cout << "\n\tNot saved. Current expression remains: ";
			}

			q.showFormula();

			break;
		}
		case 'I':
		{
			double r = inputDouble("\n\tPlease enter a number to multiply each coefficient: ");

			cout << "\n\tBefore scaling: ";
			q.showFormula();

			q = r * q;

			cout << "\n\tThe expression after scaling: ";
			q.showFormula();

			break;
		}
		case 'R':
			return;
		default: cout << "\n\tERROR: Invalid Input";
		}
		cout << "\n\n\t";
		system("pause");
	}
	while (true);
}

// Pseudorandom
void PseudorandomMenu()
{
	cout << "\n\t3> Pseudorandom menu";
	cout << "\n\t" << string(80, char(205));
	cout << "\n\t\tA. get seed";
	cout << "\n\t\tB. set seed";
	cout << "\n\t\tC. get multiplier";
	cout << "\n\t\tD. set multiplier";
	cout << "\n\t\tE. get modulus";
	cout << "\n\t\tF. set modulus";
	cout << "\n\t\tG. get increment";
	cout << "\n\t\tH. set increment";
	cout << "\n\t\tI. get next number";
	cout << "\n\t\tJ. get indirect next number";
	cout << "\n\t\tK. run experiment with different values (mutliplier, increment, and modulus)";
	cout << "\n\t" << string(80, char(196));
	cout << "\n\t\tR. Return";
	cout << "\n\t" << string(80, char(205));


}

void PseudorandomFunction()
{
	Pseudorandom p;
	do
	{
		system("cls");
		PseudorandomMenu();

		try
		{
			switch (toupper(inputChar("\n\tOption: ")))
			{
			case 'A':
				cout << "\n\tSeed = " << p.getSeed(); break;
				break;
			case 'B':
			{
				p.setSeed(inputInteger("\n\tEnter the seed: ", true));
				break;
			}
			break;
			case 'C':
			{
				cout << "\n\tMultiplier = " << p.getMultiplier();
				break;
			}
			case 'D':
				p.setMultiplier(inputInteger("\n\tEnter the multiplier: ", true));
				break;
			case 'E':
				cout << "\n\tModulus = " << p.getModulus();
				break;
			case 'F':
				p.setModulus(inputInteger("\n\tEnter the modulus: ", true));
				break;
			case 'G':
				cout << "\n\tIncrement = " << p.getIncrement();
				break;
			case 'H':
				p.setModulus(inputInteger("\n\tEnter the increment: ", true));
				break;
			case 'I': cout << "\n\tNext number = " << p.getNextNumber(); break;
			case 'J': cout << "\n\tIndirect next number: = " << p.getIndirectNextDouble(); break;
			case 'K':
			{
				try
				{
					p.runDistributionExperiment();
				}
				catch (const runtime_error& e)
				{
					cout << "\n\tERROR: " << e.what();
				}
				break;
			}
			case 'R': return;
			default: cout << "\n\tERROR: Invalid Input"; break;
			}

		}
		catch (const runtime_error& e)
		{
			cout << "\n\tERROR: " << e.what();
		}

		cout << "\n\n\t";
		system("pause");
	} while (true);

}

